[
	{"Data Types and Variables": "Data types and variables are crucial components of any programming language. Data types are different categories in which data can be stored. More specifically, they define a specific set of values, and the rules of what can be applied to those values. Variables on the other hand, are used to reference these data types. More specifically, they are a memory location that can hold values for a specific type. In most programming languages, these two terms are used hand in hand: a variable will hold some value, and this value will have an associated data type. Think of a toy bin, for example. Within this bin, we can store different types of toys: cars, blocks, board games, etc. In this scenario, the bin would be limited to one type of toy. So, if we have a bin designated to hold blocks, the bin would be a variable and the block would be the data type. \n Furthermore, there are multiple categories of types: integers, floating-points, characters, strings, booleans, and primitives. Following is a short overview of these types: \n \n Integers: Store whole numbers (eg. -1, 0, 1, 100). These types include int, long, short. \n Floating Point: Store decimal values (eg. -3.14, 0.0, 1.2). These types include float, double. \n Characters: Store individual letters or symbols (eg. ‘a’, ‘&’, ‘1’). These types include char.  \n Strings: Store sequences of characters (eg. “apple”, “20%”, “This is a string.”). These types include string. \n Boolean: Stores  value of True or False. \n \n In this section, we will explore these data types, the information they can hold, and the way variables are used to repent them."},
    {"Operators" : "In programming languages, operators represent some sort of operation, in which some calculation is performed. Note that this calculation does not have to be purely mathematical. Let me explain!\n\nThere are 4 types of operators: mathematical, relational, logical, and assignment.\n\nMathematical operators are similar to the ones you see in math, and they return some numerical value:\n+ addition\n- subtraction\n* multiplication\n/ division\n% modulus (calculates the remainder)\nRelational operators return a boolean, as they evaluate to true or false and are used to compare two expressions:\n== : equal \n!= : not equal\n> : greater than\n< : less than\n<= : less than or equal to\n>= : greater than or equal to\n\nThe == and != operators can be performed on non-numeric data types, whereas the >, <, <=, and >= are generally limited to numerical values. \n\nLogical operators also return booleans, as they evaluate to true or false, but are used to form logical statements rather than comparing two expressions:\n&& AND\n|| OR\n! NOT \n\nAssignment operators are used to assign variables to some expression:\n\n+= : add the value and assign the addition to the variable\n-= : subtract the value and assign the subtraction to the variable\n*= : multiply the value and assign the multiplication to the variable\n/= : divide the value and assign the division to the variable\n%= : find the modulus and assign it to the variable\n\nIn this section, we will explore these operators and the ways they can be used to manipulate variables, and evaluate expressions."},
    {"Conditionals": "In computer science, conditionals are expressions that will evaluate to true or false, and perform different actions depending on the result of the expression. \n\nThink of when you are making weekend plans. You might say to yourself, ‘If it is sunny, I’ll go to the beach. Otherwise, I’ll go to the movies.’ Furthermore, your decision and course of action over the weekend will be contingent on the weather. Conditionals within computer science work the same way: contingent on the conditional expression, different code will be executed. \n\nThese conditionals may utilize any combination of relational or conditional operands to determine which path of execution to take. These statements begin with an “if” statement: ‘if it is sunny,...’. They can then be followed by an else-if or else. \n\nAn else-if statement would follow an if statement, and be evaluated if the if conditional is false. else, if it is raining,...’. \n\nAn else statement follows an if, or and number of else-if statements, and any actions following this else would be executed if every other conditional were false. For instance, if it were snowing, the if-statement and else-if statement would both evaluate to false, and any actions in the else block would be executed."},
    {"Arrays": "Data structures allow programs to store data collections in organized ways that allow them to be easily accessed. Say, for example, you want to store a list of student names as strings alphabetically: “Alex”, “Bob”, and “Camila”. You can use a data structure known as an array to keep track of all of these names together and access them easily. Arrays are usually represented using square brackets, so your array of students will be equal to [“Alex”, “Bob”, “Camila”].\n\n You can access and modify what arrays store at any time. To access elements in an array, we use indexes. In all programming languages, indexes start at zero. Say for example, you want to access the second student in your array of students, then you are accessing the element at index 1, since it goes 0, 1, 2. While there are three elements in your array, the last index will be 2 because the count starts at 0. In most programming languages, you can access elements in an array using square brackets with the index you want to access, if your array of students is stored in a variable named students: students = [“Alex”, “Bob”, “Camila”], then you can access the first element by doing students[0], this represents the first element in the array, in this case 'Alex'."},
    {"Iteration": "Conditionals in programming are used when you want some code to run under specific conditions. But sometimes, you have code that you want to repeat a certain amount of times without having to write it over and over.\n\nFor example, let’s say you want to write code that will count from 1 to 10. You can either write 10 lines of code to print each consecutive number, or you can use iteration.\nIteration is the practice of repeating some code until a condition is met: when this condition is met, the repetition will stop. There are multiple ways that iteration appears in code. We will cover for-loops and while loops.\n\nFor- loops can be used to iterate through data structures, such as an array. There are two types of for-loops: generic for-loops, and for-each loops. \nThe generic for-loop will use a counter to iterate a certain number of times. The for-each loop iterates over objects in a data structure. \nFor instance, if you wanted to count from 1 to 10 you might use a generic for-loop and specify the execution of some code 10 times. However, if you had an array of student names, you might use a for-each loop to print each of those names.\n\nWhile loops are also used to repeat some code as long as a certain condition is met. They differ from for-loops, however, because they do not have any sort of built-in counters.\nFor instance, let’s say you have a variable named countdown with some unknown value and you want to decrease it until it reaches 0. The while loop can use the value of countdown within its condition, and repeatedly decrease countdown until it has a value of 0.\n\nThis section focuses on iteration, and the ways these loops can be leveraged to repeat some action. While these loops have their strengths and weaknesses, iteration emphasizes some form of repetition."},
    {"CS Foundations": "Welcome! This module is an introduction to Computer Science. It goes over key concepts that any programmer should know to bring you one step closer to becoming a master coder!\nIt contains short lessons on data types and variables, operators, conditionals, arrays, and iteration. Each of these lessons will provide more information on the individual lesson.\nGet ready to start building your computer science foundation!"},
    {"Java Basics": "Congratulations, you've finished learning about some of the core foundation of Computer Science! In this module, you will learn about a programming language called Java, and learn how to apply the key concepts you just learned to a real programming language. Similar to before, this module will contain short lessons on data types and variables, operators, conditionals, arrays, and iteration. However, this time these lessons will focus on the application of these concepts in Java, and give you a look into how to program in Java! Get ready, you're about to learn a new language!"},
    {"Data Types in Java": "Now that you’ve learned what data types and variables are, let’s show you how to create variables in Java!\n\nTo recap, the primitive types are integers, floating-points, characters, strings, and booleans. \n \nIntegers: Store whole numbers (eg. -1, 0, 1, 100). These types include int, long, short. \nFloating Point: Store decimal values (eg. -3.14, 0.0, 1.2). These types include float, double. \nCharacters: Store individual letters or symbols (eg. ‘a’, ‘&’, ‘1’). These types include char.  \nStrings: Store sequences of characters (eg. “apple”, “20%”, “This is a string.”). These types include string. \nBoolean: Stores  value of True or False. \n\nIn Java, declaring a variable uses the following form: <dataType> <variableName> = <someValue>;*\nSo declaring a name could look something like:\nString name = “Sally”;\n\nAnd creating a variable for a price could look something like:\ndouble price = 54.3;\n\nSee? Declaring variables is easy! You just have to make sure the value being assigned to the variable matches the data type declared. For instance, the following examples are NOT valid declarations in Java\nString name = 1;\nint val = “hello”;\n\nIn this lesson, you will apply what you have learned about data types, and apply that logic to declarative statements in Java! \n\n*Note that all statements in Java end in a semicolon."},
    {"Operators in Java": "In Java, operators follow practically the same logic as their conceptual counterparts: almost nothing changes when applying these concepts to Java! The only thing that must be accounted for when using operators in Java is ensuring that both sides of an operation are of the same type. What this means is that a double cannot be compared to an integer, or a String cannot be subtracted from a double. While more complex operations may allow for some wiggle room in this area, for now you can think of data types as completely separate constructs: you wouldn’t be able to add apples and bananas, or compare tomatoes and potatoes.\n\nAs a reminder, here is what you previously learned on operators:\n\n\nIn programming languages, operators represent some sort of operation, in which some calculation is performed. Note that this calculation does not have to be purely mathematical. Let me explain!\n\nThere are 4 types of operators: mathematical, relational, logical, and assignment.\n\nMathematical operators are similar to the ones you see in math, and they return some numerical value:\n+ addition\n- subtraction\n* multiplication\n/ division\n% modulus (calculates the remainder)\nRelational operators return a boolean, as they evaluate to true or false and are used to compare two expressions:\n== : equal \n!= : not equal\n> : greater than\n< : less than\n<= : less than or equal to\n>= : greater than or equal to\n\nThe == and != operators can be performed on non-numeric data types, whereas the >, <, <=, and >= are generally limited to numerical values. \n\nLogical operators also return booleans, as they evaluate to true or false, but are used to form logical statements rather than comparing two expressions:\n&& AND\n|| OR\n! NOT \n\nAssignment operators are used to assign variables to some expression:\n\n+= : add the value and assign the addition to the variable\n-= : subtract the value and assign the subtraction to the variable\n*= : multiply the value and assign the multiplication to the variable\n/= : divide the value and assign the division to the variable\n%= : find the modulus and assign it to the variable\n\nIn this section, we will explore these operators and the ways they can be used to manipulate variables, and evaluate expressions. "},
    {"Conditionals in Java": "In Java, conditionals are intuitive, as they align with the concepts behind general conditionals. \n\nConditionals take the following format in Java:\n\nif(<some condition>){<do something>}\nelse if (<some condition>){<do something else>}\nelse{<do something else>}\n\nAll blocks of conditional statements must contain only one if-statement at the beginning, but both the else-if statement and the else-statement are optional. Any number of else-if statements are allowed, but each block must contain only one else-statement. Similarly, the else-statement must come after any if or else-if statements. \n\nTo compute conditionals, the condition within the if-statement is evaluated first, if that evaluates to true the code within that block is run and the conditional block is exited (any remaining else-if and else statements are ignored). However, if it evaluates to false, the next condition is checked, or the conditional block is completed if there is no other condition (else-if, or else). This means that one of the following will occur: an else-if statement is evaluated, which results in the same series of events as the if-statement, the else block is executed, or the conditional block is complete, as no other conditions are present. \n\nThis lesson will focus on conditionals within Java, which are evaluated the same way as you’ve learned in the CS Foundations module!\n\nAs a reminder, here’s a review of what you’ve learned about conditionals:\n\nIn computer science, conditionals are expressions that will evaluate to true or false, and perform different actions depending on the result of the expression. \n\nThink of when you are making weekend plans. You might say to yourself, ‘If it is sunny, I’ll go to the beach. Otherwise, I’ll go to the movies.’ Furthermore, your decision and course of action over the weekend will be contingent on the weather. Conditionals within computer science work the same way: contingent on the conditional expression, different code will be executed. \n\nThese conditionals may utilize any combination of relational or conditional operands to determine which path of execution to take. These statements begin with an “if” statement: ‘if it is sunny,...’. They can then be followed by an else-if or else. \n\nAn else-if statement would follow an if statement, and be evaluated if the if conditional is false. else, if it is raining,...’. \n\nAn else statement follows an if, or and number of else-if statements, and any actions following this else would be executed if every other conditional were false. For instance, if it were snowing, the if-statement and else-if statement would both evaluate to false, and any actions in the else block would be executed. If you follow an if statement by another if statement and both of their conditions are satisfied, both will get executed, since omitting the “else” starts a new if-else block, so it will get recognized as separate rather than as part of the first if."},
    {"Arrays in Java": "Arrays are a data structure used to store data of the same type. There are initialized using the construct ”[]” in Java: \n1.<dataType>[] name =  new <dataType>[<size of array>];\n2.<dataType>[] name =  new <dataType>[]<values to store>;\n\nRemember the list of student names? Say we want to store the names “Alex”, “Bob”, and “Camilla”. We can do this one of two ways:\n1. String[] names = new String[3];\nnames[0] = “Alex”;\nnames[1]=”Bob”;\nnames[2]=”Camilla”;\n\n2. String[] names = new String[] {“Alex”, “Bob”, “Camilla”};\n\nWith either method, arrays are declared with a fixed size: either through indicating the number of values to store in the array, or by declaring a finite number of values when creating the array. This being said, the values within the array can be changed at any time. You can think of it like cutting up a piece of paper: cutting the size is final, but you can draw whatever you’d like on the paper. \n\nThis lesson will focus on arrays within Java, and you’ll get more comfortable declaring them, accessing the variables within them, and manipulating the values they hold!\n\nAs a reminder, the following is what you previously learned about arrays:\nData structures allow programs to store data collections in organized ways that allow them to be easily accessed. Say, for example, you want to store a list of student names as strings alphabetically: “Alex”, “Bob”, and “Camila”. You can use a data structure known as an array to keep track of all of these names together and access them easily. Arrays are usually represented using square brackets, so your array of students will be equal to [“Alex”, “Bob”, “Camila”].\n\n You can access and modify what arrays store at any time. To access elements in an array, we use indexes. In all programming languages, indexes start at zero. Say for example, you want to access the second student in your array of students, then you are accessing the element at index 1, since it goes 0, 1, 2. While there are three elements in your array, the last index will be 2 because the count starts at 0. In most programming languages, you can access elements in an array using square brackets with the index you want to access, if your array of students is stored in a variable named students: students = [“Alex”, “Bob”, “Camila”], then you can access the first element by doing students[0], this represents the first element in the array, in this case “Alex”."},
    {"Iteration in Java": "If you remember, there are three main ways to implement iteration: for-loops, for-each loops, and while-loops. Let’s see how we can create each of these in Java:\n\nFor Loop:\nfor (<statement1>; <statement2>; <statement3>){<code block>}\n\nStatement 1 is executed once before the execution of the code block within the loop.\nStatement 2 is a condition, which defines when the block should be executed.\nStatement 3 is executed every time after the execution of the code block.\n\nFor instance, the following code will print the values 0 to 4:\nfor (int i = 0; i < 5; i++){print(i);}\n\nTypical for-loops follow this form. They use a temporary counter (i) set to an initial value (0), use this counter in a conditional to ensure the loop is only run a certain number of times (in this case 4 times), and then adjust the value of the counter (adding 1 to i after every iteration).\n\n\nFor Each Loop:\nfor(<dataType> <variable> : <some list-like data type>){<code block>}\n\nThese loops are useful for iterating over some list structure, such as an array. Instead of using a counter to access variables one at a time (think arr[0], arr[1],...), we can directly access the value within the array.\n\nFor instance, using the array [“Alex”, “Bob”, “Camilla”], we can easily print each of these names using:\nfor (String name : arr) {print(name)}\n\nWhen compared to a classic for loop, these loops are less useful when we only want to iterate a finite number of times, or if we want to keep track of the index within an array. For example, if we wanted to know which index the name “Bob” was stored at, we would use a for-loop instead of a for-each loop. \n\n\nWhile Loop:\nwhile (<condition>) {<code block>}\n\nThis loop will check the condition, and run the code block as long as the condition is true.\n\nFor instance, the following code will print the values 0 to 4:\nint i = 0;\nwhile (i < 5){\nprint(i);\ni++;\n}\n\nBoth the while loop and for loop can be used for similar tasks, but generally the for-loop is best when the number of iterations is known whereas the while loop executes until the conditional statement is proved wrong. For now, all you need to know is how these loops are declared, and how to make them iterate for a specific amount of time!"}
]
