[
	{"Data Types and Variables": "Data types and variables are crucial components of any programming language. Data types are different categories in which data can be stored. More specifically, they define a specific set of values, and the rules of what can be applied to those values. Variables on the other hand, are used to reference these data types. More specifically, they are a memory location that can hold values for a specific type. In most programming languages, these two terms are used hand in hand: a variable will hold some value, and this value will have an associated data type. Think of a toy bin, for example. Within this bin, we can store different types of toys: cars, blocks, board games, etc. In this scenario, the bin would be limited to one type of toy. So, if we have a bin designated to hold blocks, the bin would be a variable and the block would be the data type. \n Furthermore, there are multiple categories of types: integers, floating-points, characters, strings, booleans, and primitives. Following is a short overview of these types: \n \n Integers: Store whole numbers (eg. -1, 0, 1, 100). These types include int, long, short. \n Floating Point: Store decimal values (eg. -3.14, 0.0, 1.2). These types include float, double. \n Characters: Store individual letters or symbols (eg. ‘a’, ‘&’, ‘1’). These types include char.  \n Strings: Store sequences of characters (eg. “apple”, “20%”, “This is a string.”). These types include string. \n Boolean: Stores  value of True or False. \n \n In this section, we will explore these data types, the information they can hold, and the way variables are used to repent them."},
    {"Operators" : "In programming languages, operators represent some sort of operation, in which some calculation is performed. Note that this calculation does not have to be purely mathematical. Let me explain!\n\nThere are 4 types of operators: mathematical, relational, logical, and assignment.\n\nMathematical operators are similar to the ones you see in math, and they return some numerical value:\n+ addition\n- subtraction\n* multiplication\n/ division\n% modulus (calculates the remainder)\nRelational operators return a boolean, as they evaluate to true or false and are used to compare two expressions:\n== : equal \n!= : not equal\n> : greater than\n< : less than\n<= : less than or equal to\n>= : greater than or equal to\n\nThe == and != operators can be performed on non-numeric data types, whereas the >, <, <=, and >= are generally limited to numerical values. \n\nLogical operators also return booleans, as they evaluate to true or false, but are used to form logical statements rather than comparing two expressions:\n&& AND\n|| OR\n! NOT \n\nAssignment operators are used to assign variables to some expression:\n\n+= : add the value and assign the addition to the variable\n-= : subtract the value and assign the subtraction to the variable\n*= : multiply the value and assign the multiplication to the variable\n/= : divide the value and assign the division to the variable\n%= : find the modulus and assign it to the variable\n\nIn this section, we will explore these operators and the ways they can be used to manipulate variables, and evaluate expressions."},
    {"Conditionals": "In computer science, conditionals are expressions that will evaluate to true or false, and perform different actions depending on the result of the expression. \n\nThink of when you are making weekend plans. You might say to yourself, ‘If it is sunny, I’ll go to the beach. Otherwise, I’ll go to the movies.’ Furthermore, your decision and course of action over the weekend will be contingent on the weather. Conditionals within computer science work the same way: contingent on the conditional expression, different code will be executed. \n\nThese conditionals may utilize any combination of relational or conditional operands to determine which path of execution to take. These statements begin with an “if” statement: ‘if it is sunny,...’. They can then be followed by an else-if or else. \n\nAn else-if statement would follow an if statement, and be evaluated if the if conditional is false. else, if it is raining,...’. \n\nAn else statement follows an if, or and number of else-if statements, and any actions following this else would be executed if every other conditional were false. For instance, if it were snowing, the if-statement and else-if statement would both evaluate to false, and any actions in the else block would be executed."},
    {"Arrays": "Data structures allow programs to store data collections in organized ways that allow them to be easily accessed. Say, for example, you want to store a list of student names as strings alphabetically: “Alex”, “Bob”, and “Camila”. You can use a data structure known as an array to keep track of all of these names together and access them easily. Arrays are usually represented using square brackets, so your array of students will be equal to [“Alex”, “Bob”, “Camila”].\n\n You can access and modify what arrays store at any time. To access elements in an array, we use indexes. In all programming languages, indexes start at zero. Say for example, you want to access the second student in your array of students, then you are accessing the element at index 1, since it goes 0, 1, 2. While there are three elements in your array, the last index will be 2 because the count starts at 0. In most programming languages, you can access elements in an array using square brackets with the index you want to access, if your array of students is stored in a variable named students: students = [“Alex”, “Bob”, “Camila”], then you can access the first element by doing students[0], this represents the first element in the array, in this case 'Alex'."},
    {"Iteration": "Conditionals in programming are used when you want some code to run under specific conditions. But sometimes, you have code that you want to repeat a certain amount of times without having to write it over and over.\n\nFor example, let’s say you want to write code that will count from 1 to 10. You can either write 10 lines of code to print each consecutive number, or you can use iteration.\nIteration is the practice of repeating some code until a condition is met: when this condition is met, the repetition will stop. There are multiple ways that iteration appears in code. We will cover for-loops and while loops.\n\nFor- loops can be used to iterate through data structures, such as an array. There are two types of for-loops: generic for-loops, and for-each loops. \nThe generic for-loop will use a counter to iterate a certain number of times. The for-each loop iterates over objects in a data structure. \nFor instance, if you wanted to count from 1 to 10 you might use a generic for-loop and specify the execution of some code 10 times. However, if you had an array of student names, you might use a for-each loop to print each of those names.\n\nWhile loops are also used to repeat some code as long as a certain condition is met. They differ from for-loops, however, because they do not have any sort of built-in counters.\nFor instance, let’s say you have a variable named countdown with some unknown value and you want to decrease it until it reaches 0. The while loop can use the value of countdown within its condition, and repeatedly decrease countdown until it has a value of 0.\n\nThis section focuses on iteration, and the ways these loops can be leveraged to repeat some action. While these loops have their strengths and weaknesses, iteration emphasizes some form of repetition."},
    {"CS Foundations": "Brief overview for cs foundations coming soon..."},
    {"Java Basics": "Brief overview for Java Basics coming soon..."},
    {"Data Types in Java": "Brief overview for Data Types in Java coming soon..."},
    {"Operators in Java": "Brief overview for Operators in Java coming soon..."},
    {"Conditionals in Java": "Brief overview for Conditionals in Java coming soon..."},
    {"Arrays in Java": "Brief overview for Arrays in Java coming soon..."},
    {"Iteration in Java": "Brief overview for Iteration in Java coming soon..."}
]
